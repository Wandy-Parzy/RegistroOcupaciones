@page "/R_Prestamo"
@inject PrestamoBLL prestamoBLL
@inject PersonaBLL personaBLL
@inject NotificationService notificacion

<EditForm Model="prestamos" OnValidSubmit="Guardar">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PrestamoId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="prestamos.PrestamoId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Fecha*@
                <div class="form-group">
                    <label>Fecha De Nacimiento</label>
                    <InputDate @bind-Value="prestamos.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Fecha)" />
                </div>


                @*Vence*@
                <div class="form-group">
                    <label>Vence</label>
                    <InputDate @bind-Value="prestamos.Vence" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Vence)" />
                </div>

                @*PersonaId*@
                    <div class="mb-3">
                        <label>Persona</label>
                        <InputSelect class="form-select" @bind-Value="prestamos.PersonaId">
                            <option value="0" disabled> Seleccione uno </option>
                            @foreach (var persona in listaPersonas)
                            {
                                <option value="@persona.PersonaId"> @persona.Nombre</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => prestamos.PersonaId)" class="form-control" />
                    </div>

                @*Consepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="prestamos.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="prestamos.Monto" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Monto)" />
                </div>

                @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber @bind-Value="prestamos.Balance" class="form-control" />
                    <ValidationMessage For="@(() => prestamos.Balance)" />
                </div>

            </div>
            <div class="card-footer">
                <div class="mb-3 text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <i class="oi oi-file" /> Nuevo
                    </button>
                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-document" /> Guardar
                    </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash" /> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]

    public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public Persona personas { get; set; } = new Persona();
    public Prestamos prestamos { get; set; } = new Prestamos();
    public List<Persona> listaPersonas { get; set; } = new List<Persona>();
    public List<Prestamos> listaPrestamos = new List<Prestamos>();
    public int prestamoId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        listaPersonas = await personaBLL.GetPersonas(p => true);
        if (prestamoId > 0)
        {
            this.prestamos.PrestamoId = prestamoId;
            await this.Buscar();

        }
    }

    public void Nuevo()
    {
        prestamos = new Prestamos();
        notificacion.ShowNotification("Nueva plantilla.", NotificationSeverity.Success);

    }

    bool Validar()
    {
       return prestamos.Concepto.Contains("");
    }

    public async Task Guardar()
    {
       
        bool guardado = await prestamoBLL.Guardar(this.prestamos);
        if (guardado)
        {
            Nuevo();
            notificacion.ShowNotification("Guardado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue guardado.", NotificationSeverity.Error);
        }
    }

    private async Task Buscar()
    {
        if (prestamos.PrestamoId > 0 || ocupacion.OcupacionId > 0 || personas.PersonaId > 0)
        {
            var encontrado = await prestamoBLL.Buscar(prestamos.PrestamoId);

            if (encontrado != null)
            {
                this.prestamos = encontrado;
                notificacion.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else
            {
                notificacion.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }
        }
    }

    public async Task Eliminar()
    {

       var elimino = await prestamoBLL.Eliminar(prestamos);
        if (elimino)
        {
            Nuevo();
            notificacion.ShowNotification("Eliminado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue eliminado.", NotificationSeverity.Error);
        }
    }

}