 @page "/R_Pagos"
@page "/pago/{PagoId:int}"

@inject PagosBLL pagosBLL
@inject PersonaBLL personaBLL
@inject PrestamoBLL prestamoBLL
@inject NotificationService notificacion


<EditForm Model="pago" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Pagos</h3>
        </div>

        <div class="card-body">

            @*PagoId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="m-3">
                        <label>PagoId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="pago.PagoId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                @*Fecha*@
                <div class="m-3">
                    <label>Fecha</label>
                    <InputDate @bind-Value="pago.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => pago.Fecha)" />
                </div>

                @*PersonaId*@
                <div class="m-3">
                    <label>Persona</label>
                    <InputSelect class="form-select" @bind-Value="persona.PersonaId">
                        <option value="0" disabled> Seleccione uno </option>
                        @foreach (var persona in listaPersonas)
                        {
                            <option value="@persona.PersonaId"> @persona.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => persona.PersonaId)" class="form-control" />
                </div>

                @*Concepto*@
                <div class="m-3">
                    <label>Concepto</label>
                    <InputText @bind-Value="pago.Concepto" class="form-control" />
                    <ValidationMessage For="@(() => pago.Concepto)" />
                </div>

                @*Monto*@
                <div class="m-3">
                    <label>Monto</label>
                    <InputNumber @bind-Value="pago.Monto" class="form-control" />
                    <ValidationMessage For="@(() => pago.Monto)" />
                </div>

                  @* Pagos de detalle*@
             <fieldset class="border-success">
                <h3>Detalle de Pago</h3>
                <div class="row">

                        @*PrestamoId*@
                        <div class="col-md-2">
                        <label>PrestamoId:</label>
                    <InputSelect class="form-select" @bind-Value="prestamo.PrestamoId">
                        <option value="0" disabled> Seleccione uno </option>
                            @foreach (var prestamo in listaPrestamos)
                            {
                               <option value="@prestamo.PrestamoId"> @prestamo.PrestamoId</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => prestamo.PrestamoId)" class="form-control" />
                    </div>

                        @*ValorPagado*@
                        <div class="col-md-2">
                            <label>ValorPagado</label>
                            <InputNumber @bind-Value="detalle.ValorPagado" class="form-control" />
                            <ValidationMessage For="@(() => detalle.ValorPagado)" />
                        </div>

                        @*Boton agregar *@
                    <div class="col-2">
                        <br>
                        <button type="button" class="btn btn-primary input-group-text" @onclick="AddDetalle">
                            <span class="oi oi-plus">Agregar</span>
                        </button>
                    </div>
                    </div>
                </fieldset>

                 @*Tabla de detalles*@
            <hr />
            <table class="table table-bordered table-light">
                <thead class="thead">
                    <tr class="table">
                        <th>PrestamoId</th>
                        <th>Valor Pagado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in pago.Detalle)
                    {
                        <tr>
                            <td>@prestamo.PrestamoId</td>
                            <td>@detalle.ValorPagado</td>
                            <td> <button @onclick="@(() => pago.Detalle.Remove(detalle) )"><i class="oi oi-trash" /> Eliminar</button>   </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row justify-content-between">
                <div class="col-4">
                    <label>Monto Total</label>
                    <div class="input-group mb-3">
                        <span class="form-control">@pago.Monto</span>
                    </div>
                </div>
            </div>
            <hr/>
        </div>
    </div>
      
    
                <div class="card-footer">
                    <div class="mb-3 text-center" display: inline-block>
                        <button type="button" class="btn btn-lg btn-primary" @onclick="Editar">
                            <i class="oi oi-file" /> Editar
                        </button>
                        <button type="submit" class="btn btn-lg btn-success">
                            <i class="oi oi-document" /> Guardar
                        </button>
                        <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                            <i class="oi oi-trash" /> Eliminar
                        </button>
                    </div>
                </div>      
            </div>
</EditForm>

@code {

    [Parameter]

    public int PagoId { get; set; }
    public Pagos pago { get; set; } = new Pagos();
    public Persona persona { get; set; } = new Persona();
    public Prestamos prestamo { get; set; } = new Prestamos();
    public PagosDetalle detalle = new PagosDetalle();

    public List<Persona> listaPersonas { get; set; }  = new List<Persona>();
    public List<Prestamos> listaPrestamos { get; set; }  = new List<Prestamos>();


    protected  override async Task OnInitializedAsync()
    {
        listaPersonas = await personaBLL.GetPersonas(o => true);
        listaPrestamos = await prestamoBLL.GetPrestamos(o => true);
        if (PagoId > 0)
        {

            this.pago.PagoId = PagoId;
           await this.Buscar();
        }
    }

    public void Nuevo()
    {
        pago = new Pagos();
        pago.Fecha = DateTime.Now;
        notificacion.ShowNotification("Nueva plantilla.", NotificationSeverity.Success);

    }

    public void AddDetalle()
    
    {
        var prestamo = prestamoBLL.Buscar(detalle.PrestamoId);
        this.pago.Detalle.Add(this.detalle);
        this.detalle = new PagosDetalle();

        pago.Monto = pago.Detalle.Sum(d => d.ValorPagado);

    }

    bool Validar()
    {
        return pago.Concepto.Contains(".");
    }

    public async Task Guardar()
    {
        bool guarda = await pagosBLL.Guardar(pago);
        if (guarda)
        {
            Nuevo();
            notificacion.ShowNotification("Guardado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue guardado.", NotificationSeverity.Error);
        }
    }

    private async Task Buscar()
    {
        if (pago.PagoId > 0)
        {
            var encontrado = await pagosBLL.Buscar(pago.PagoId);

            if (encontrado != null)
            {
                this.pago = encontrado;
                notificacion.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else
            {
                notificacion.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }
        }
    }

    public async Task Eliminar()
    {
        var elimino = await pagosBLL.Eliminar(pago);
        if (elimino)
        {
            Nuevo();
            notificacion.ShowNotification("Eliminado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue eliminado.", NotificationSeverity.Error);
        }
    }
    public  async Task Editar()
    {

        var editar = await pagosBLL.Editar(pago);
        if (editar)
        {
            Nuevo();
            notificacion.ShowNotification("Editado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue editado.", NotificationSeverity.Error);

        }

    }
}