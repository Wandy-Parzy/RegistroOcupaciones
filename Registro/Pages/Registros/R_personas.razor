@page "/R_personas"
@inject PersonaBLL personaBLL
@inject NotificationService notificacion

<EditForm Model="personas" OnValidSubmit="Guardar">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header">
            <h3>Registro de personas</h3>
        </div>
        <div class="card-body">

            @*PersonaId*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="form-group">
                        <label>PersonaId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="personas.PersonaId" class="form-control col-4" />
                            <div class="input-group-append">
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text"
                                        @onclick="Buscar">Buscar</button>

                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Nombre*@
                <div class="form-group">
                    <label>Nombre</label>
                    <InputText @bind-Value="personas.Nombre" class="form-control" />
                    <ValidationMessage For="@(() => personas.Nombre)" />
                </div>

                @*Telefono*@
                <div class="form-group">
                    <label>Teléfono</label>
                    <InputNumber @bind-Value="personas.Telefono" class="form-control" />
                    <ValidationMessage For="@(() => personas.Telefono)" />
                </div>

                @*Celular*@
                <div class="form-group">
                    <label>Celular</label>
                    <InputNumber @bind-Value="personas.Celular" class="form-control" />
                    <ValidationMessage For="@(() => personas.Celular)" />
                </div>
                @*Email*@
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="personas.Email" class="form-control" />
                    <ValidationMessage For="@(() => personas.Email)" />
                </div>

                @*Direccion*@
                <div class="form-group">
                    <label>Dirección</label>
                    <InputText @bind-Value="personas.Direccion" class="form-control" />
                    <ValidationMessage For="@(() => personas.Direccion)" />
                </div>

                @*FechaNacimiento*@
                <div class="form-group">
                    <label>Fecha De Nacimiento</label>
                    <InputDate @bind-Value="personas.FechaNacimiento" class="form-control" />
                    <ValidationMessage For="@(() => personas.FechaNacimiento)" />
                </div>

                <div class="mb-3 col">
                    <label>Ocupaciones</label>
                    <InputSelect class="form-select" @bind-Value="personas.OcupacionId">
                        @foreach (Ocupaciones ocupacion in listaOcupaciones)
                        {
                            <option value="@ocupacion.OcupacionId">@ocupacion.Descripcion</option>
                        }
                    </InputSelect>
                </div>

            </div>
            <div class="card-footer">
                <div class="mb-3 text-center" display: inline-block>
                    <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                        <i class="oi oi-file" /> Nuevo
                    </button>
                    <button type="submit" class="btn btn-lg btn-success">
                        <i class="oi oi-document" /> Guardar
                    </button>
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash" /> Eliminar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>
@code {
    [Parameter]

    public Ocupaciones ocupacion { get; set; } = new Ocupaciones();
    public Persona personas { get; set; } = new Persona();

    public List<Ocupaciones> listaOcupaciones = new List<Ocupaciones>();
    public int OcupacionId { get; set; }

    public int personaId { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (personaId > 0)
        {
            this.personas.PersonaId = personaId;
            await this.Buscar();

        }
        listaOcupaciones = await personaBLL.GetOcupaciones(c => true);
    }

    public void Nuevo()
    {
        personas = new Persona();
        notificacion.ShowNotification("Nueva plantilla.", NotificationSeverity.Success);
    }

    bool Validar()
    {
        return personas.Email.Contains(".com");
    }

    public async Task Guardar()
    {

        bool guardado = await personaBLL.Guardar(personas);
        if (guardado)
        {
            Nuevo();
            notificacion.ShowNotification("Guardado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue guardado.", NotificationSeverity.Error);
        }
    }

    private async Task Buscar()
    {
        if (personas.PersonaId > 0 || ocupacion.OcupacionId > 0)
        {
            var encontrado = await personaBLL.Buscar(personas.PersonaId);

            if (encontrado != null)
            {
                this.personas = encontrado;
                notificacion.ShowNotification("Registro encontrado", NotificationSeverity.Success);
            }
            else
            {
                notificacion.ShowNotification("Registro no encontrado", NotificationSeverity.Warning);
            }
        }
    }
    public async Task Eliminar()
    {
        var elimino = await personaBLL.Eliminar(personas);
        if (elimino)
        {
            Nuevo();
            notificacion.ShowNotification("Eliminado correctamente.");
        }
        else
        {
            notificacion.ShowNotification("No fue eliminado.", NotificationSeverity.Error);
        }
    }

}